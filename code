import torch
import torchvision
from torchvision import transforms
from torch.utils.data import DataLoader
from torchvision.datasets import ImageFolder
from torchvision.models import resnet18
from torch.nn import functional as F
from tqdm import tqdm
import numpy as np
import matplotlib.pyplot as plt

transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

dataset = ImageFolder('data/real_estate', transform=transform)

dataloader = DataLoader(dataset, batch_size=16, shuffle=True)

model = resnet18(pretrained=True)
model.fc = torch.nn.Linear(512, 10)

loss_fn = torch.nn.CrossEntropyLoss()

optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

for epoch in range(10):
    for i, (images, labels) in enumerate(tqdm(dataloader)):
        
        optimizer.zero_grad()
        
        outputs = model(images)
        
        loss = loss_fn(outputs, labels)
        
        loss.backward()
        
        optimizer.step()

torch.save(model.state_dict(), 'model.pth')

prompt = 'A photo of a modern house with a pool'

image = model.generate(prompt)

plt.imshow(image)
plt.show()
